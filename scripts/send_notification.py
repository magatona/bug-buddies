import os
import requests
import json
from datetime import datetime

def send_discord_notification():
    """Send completion notification to Discord webhook."""
    webhook_url = os.environ.get("WEBHOOK_URL")
    
    if not webhook_url:
        print("No Discord webhook URL provided, skipping notification")
        return
    
    pr_number = os.environ.get("PR_NUMBER", "Unknown")
    target_repo = os.environ.get("TARGET_REPO", "magatona/bug-buddies")
    
    embed = {
        "title": "🎨 Bug Buddies Asset Generation Complete",
        "description": f"Parallel agent asset generation and integration completed for repository `{target_repo}`",
        "color": 0x00ff00,
        "fields": [
            {
                "name": "📊 Status",
                "value": "✅ Completed Successfully",
                "inline": True
            },
            {
                "name": "🔗 Pull Request",
                "value": f"[#{pr_number}](https://github.com/{target_repo}/pull/{pr_number})" if pr_number != "Unknown" else "N/A",
                "inline": True
            },
            {
                "name": "🤖 Generated By",
                "value": "5 Parallel Agents",
                "inline": True
            },
            {
                "name": "🐛 Assets Generated",
                "value": "• 🪲 Beetle sprites & animations\n• 🦋 Butterfly sprites & animations\n• 🐞 Ladybug sprites & animations\n• 🐛 Caterpillar sprites & animations\n• 🎮 UI elements & effects",
                "inline": False
            }
        ],
        "footer": {
            "text": f"Bug Buddies Asset Generator • {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
        },
        "thumbnail": {
            "url": "https://raw.githubusercontent.com/magatona/bug-buddies/main/assets/tray-icon.png"
        }
    }
    
    payload = {
        "embeds": [embed],
        "username": "Bug Buddies Bot",
        "avatar_url": "https://raw.githubusercontent.com/magatona/bug-buddies/main/assets/tray-icon.png"
    }
    
    try:
        response = requests.post(webhook_url, json=payload)
        response.raise_for_status()
        print("✅ Discord notification sent successfully")
    except Exception as e:
        print(f"❌ Failed to send Discord notification: {e}")

def send_slack_notification():
    """Send completion notification to Slack webhook."""
    webhook_url = os.environ.get("SLACK_WEBHOOK_URL")
    
    if not webhook_url:
        print("No Slack webhook URL provided, skipping notification")
        return
    
    pr_number = os.environ.get("PR_NUMBER", "Unknown")
    target_repo = os.environ.get("TARGET_REPO", "magatona/bug-buddies")
    
    payload = {
        "text": "🎨 Bug Buddies Asset Generation Complete",
        "blocks": [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "🎨 Bug Buddies Asset Generation Complete"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*Repository:*\n`{target_repo}`"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Pull Request:*\n<https://github.com/{target_repo}/pull/{pr_number}|#{pr_number}>" if pr_number != "Unknown" else "*Pull Request:*\nN/A"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "*Generated Assets:*\n• 🪲 Beetle sprites & animations\n• 🦋 Butterfly sprites & animations\n• 🐞 Ladybug sprites & animations\n• 🐛 Caterpillar sprites & animations\n• 🎮 UI elements & effects"
                }
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"Generated by 5 parallel agents • {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
                    }
                ]
            }
        ]
    }
    
    try:
        response = requests.post(webhook_url, json=payload)
        response.raise_for_status()
        print("✅ Slack notification sent successfully")
    except Exception as e:
        print(f"❌ Failed to send Slack notification: {e}")

def main():
    """Main notification function."""
    print("📢 Sending completion notifications...")
    
    send_discord_notification()
    send_slack_notification()
    
    print("📢 Notification process completed")

if __name__ == "__main__":
    main()
